{"version":3,"sources":["components/settings.jsx","components/keywords.jsx","components/sites.jsx","App.js","serviceWorker.js","index.js"],"names":["Settings","props","updateForm","response","Object","entries","length","constructor","console","log","newObj","data","key","value","setState","browser","counters","device","tools","handleClickAdd","e","stateToChange","target","prevState","handleClickSubtract","checkboxClick","stateValue","state","checkboxClickDevice","checkboxClickTools","onExport","exportData","onStart","alert","onStop","axios","get","then","result","className","type","name","onChange","this","checked","chrome","safari","firefox","opera","explorer","incognito","onClick","Device","Vinn","Phone","Mobile","Fly","cookies","resolution","tracks","saving","generate","protection","history","id","Component","Keywords","onSearchChange","addKeyword","handleSubmitAdd","preventDefault","keywords","input","handleSubmitClear","filter","keyword","onSubmit","placeholder","ref","map","k","Sites","sites","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5595f4b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass Settings extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            browser: {'chrome': false, 'safari': false, 'firefox': false, 'opera': false, 'explorer': false, 'incognito': false},\n            counters: {'targetedMin': 0, 'targetedMax': 0, 'visitPage': 0, 'visitMin': 0, 'visitMax': 0, 'operationMin': 0, 'operationMax': 0, 'targetSiteMin': 0, 'targetSiteMax': 0, 'autoReset': 0},\n            device: {'Device': false, 'Vinn': false, 'Phone': false, 'Mobile': false, 'Fly': false},\n            tools: {'cookies': false, 'resolution': false, 'tracks': false, 'saving': false, 'generate': false, 'protection': false, 'history': false}\n        }\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/')\n        .then( result => {\n            // console.log(result)\n            this.updateForm( result )\n        })\n    }\n\n    updateForm = ( response ) => {\n\n        if( Object.entries(response).length === 0 && response.constructor === Object) {\n            console.log('response is empty')\n        } else {\n            // console.log('not empty')\n            const newObj = {}\n            for (let [key, value] of Object.entries(response.data[0])) {\n                const resKey = `${key}`;\n                const resValue = `${value}`;\n                console.log(`${key}: ${value}`);\n                newObj[key] = value;\n            }\n\n            this.setState({browser: newObj['browser']})\n            this.setState({counters: newObj['counters']})\n            this.setState({device: newObj['device']})\n            this.setState({tools: newObj['tools']})\n\n        }\n    }\n\n    handleClickAdd = (e) => {\n        // console.log(e.target.value)\n        const stateToChange = `${e.target.value}`\n        this.setState( (prevState ) => {\n            prevState.counters[stateToChange] = prevState.counters[stateToChange] + 1;\n            return prevState\n        });\n    }\n    handleClickSubtract = (e) => {\n        // console.log(e.target.value)\n        const stateToChange = `${e.target.value}`\n        this.setState( (prevState ) => {\n            // prevState.counters[`${e.target.value}`] = prevState.counters[`${e.target.value}`] - 1;\n            prevState.counters[stateToChange] = prevState.counters[stateToChange] - 1;\n            return prevState\n        });\n    }\n\n    checkboxClick = (e) => {\n        const stateValue = `${e.target.value}`;\n        const stateToChange = !this.state.browser[stateValue]\n        // Updates object in state\n        this.setState( (prevState ) => {\n            prevState.browser[stateValue] = stateToChange;\n            return prevState\n        });\n    }\n\n    checkboxClickDevice = (e) => {\n        const stateValue = `${e.target.value}`;\n        const stateToChange = !this.state.device[stateValue]\n        // Updates object in state\n        this.setState( (prevState ) => {\n            prevState.device[stateValue] = stateToChange;\n            return prevState\n        });\n    }\n\n    checkboxClickTools = (e) => {\n        const stateValue = `${e.target.value}`;\n        const stateToChange = !this.state.tools[stateValue]\n        // Updates object in state\n        this.setState( (prevState ) => {\n            prevState.tools[stateValue] = stateToChange;\n            return prevState\n        });\n    }\n\n    onExport = () => {\n        // Here data could be used to send as POST request via Axios as needed\n        const exportData = this.state;\n        console.log(exportData);\n    }\n\n    onStart = () => {\n        alert(\"You've click the Start button\")\n    }\n\n    onStop = () => {\n        alert(\"You've clicked on the stop button\")\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Settings</h1>\n\n                <div className='settings-container'>\n\n                        <form className='browser-checkbox'>\n                            <div className='browser-checkbox-item'>\n                                <label>Chrome<input type='checkbox' name='Chrome' value='chrome' onChange={this.checkboxClick} checked={this.state.browser.chrome} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Safari<input type='checkbox' name='Safari' value='safari' onChange={this.checkboxClick} checked={this.state.browser.safari} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Firefox<input type='checkbox' name='Firefox' value='firefox' onChange={this.checkboxClick} checked={this.state.browser.firefox} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Opera<input type='checkbox' name='Opera' value='opera' onChange={this.checkboxClick} checked={this.state.browser.opera} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Explorer<input type='checkbox' name='Explorer' value='explorer' onChange={this.checkboxClick} checked={this.state.browser.explorer} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Incognito<input type='checkbox' name='Incognito' value='incognito' onChange={this.checkboxClick} checked={this.state.browser.incognito} /></label>\n                            </div>\n                        </form>\n\n\n                        <div className='ad-settings'>\n\n                            <div className='seconds-targeted'>\n                                <label className='ad-contents'>\n                                    <p className='ad-words'>Wait</p>                                                              \n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['targetedMin']}</div>\n                                        <div className='change-counter'>\n                                            <button value='targetedMin' onClick={this.handleClickAdd}>+</button>\n                                            <button value='targetedMin' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>   \n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['targetedMax']}</div>\n                                        <div className='change-counter'>\n                                            <button value='targetedMax' onClick={this.handleClickAdd}>+</button>\n                                            <button value='targetedMax' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>   \n                                    <p className='ad-words'>seconds on targeted site</p>  \n                                </label>\n                            </div> \n\n                            <div className='visit'>\n                                <form>\n                                    <div className='visit-item'>\n                                        <label><input type='checkbox' name='Chrome' />Visit page within the site</label>\n                                    </div>\n                                </form>\n                            </div>\n\n                            <div className='wait-visit'>\n\n                            <label className='ad-contents'>\n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['visitPage']}</div>\n                                        <div className='change-counter'>\n                                            <button value='visitPage' onClick={this.handleClickAdd}>+</button>\n                                            <button value='visitPage' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>    \n                                    <p className='ad-words'>pages</p>\n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['visitMin']}</div>\n                                        <div className='change-counter'>\n                                            <button value='visitMin' onClick={this.handleClickAdd}>+</button>\n                                            <button value='visitMin' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div> \n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['visitMax']}</div>\n                                        <div className='change-counter'>\n                                            <button value='visitMax' onClick={this.handleClickAdd}>+</button>\n                                            <button value='visitMax' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div> \n                                    <p className='ad-words'>visit from to second.</p>\n                                </label>\n                            </div> \n\n                            <div className='operation'>\n                            <label className='ad-contents'>\n                                    <p className='ad-words'>After the operation is complete</p>\n\n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['operationMin']}</div>\n                                        <div className='change-counter'>\n                                            <button value='operationMin' onClick={this.handleClickAdd}>+</button>\n                                            <button value='operationMin' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>    \n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['operationMax']}</div>\n                                        <div className='change-counter'>\n                                            <button value='operationMax' onClick={this.handleClickAdd}>+</button>\n                                            <button value='operationMax' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>    \n                                    <p className='ad-words'>seconds wait.</p>\n                                </label>\n                            </div> \n\n                            <div className='targetSite'>\n\n                            <label className='ad-contents'>\n                                    <p className='ad-words'>Target site</p>\n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['targetSiteMin']}</div>\n                                        <div className='change-counter'>\n                                            <button value='targetSiteMin' onClick={this.handleClickAdd}>+</button>\n                                            <button value='targetSiteMin' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>  \n                                    <p className='ad-words'>if not found times</p>\n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['targetSiteMax']}</div>\n                                        <div className='change-counter'>\n                                            <button value='targetSiteMax' onClick={this.handleClickAdd}>+</button>\n                                            <button value='targetSiteMax' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>     \n                                    <p className='ad-words'>minutes wait.</p>\n                                </label>\n                            </div> \n\n                            <div className='autoReset'>\n\n                            <label className='ad-contents'>\n                                    <div className='counter'>\n                                        <div className='count'>{this.state.counters['autoReset']}</div>\n                                        <div className='change-counter'>\n                                            <button value='autoReset' onClick={this.handleClickAdd}>+</button>\n                                            <button value='autoReset' onClick={this.handleClickSubtract}>-</button>\n                                        </div>\n                                    </div>  \n                                    <p className='ad-words'>automatic reset after operation</p>   \n                                </label>\n\n                            </div> \n\n                        </div> \n                        {/* end of ad-settings */}\n\n\n                        <form className='device-checkbox'>\n                            <div className='browser-checkbox-item'>\n                                <label>Device Reset<input type='checkbox' name='Device Reset' value='Device' onClick={this.checkboxClickDevice} checked={this.state.device.Device} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Vinn Reset<input type='checkbox' name='Vinn Reset' value='Vinn' onClick={this.checkboxClickDevice} checked={this.state.device.Vinn} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Phone Reset<input type='checkbox' name='Phone Reset' value='Phone' onClick={this.checkboxClickDevice} checked={this.state.device.Phone} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Mobile Data<input type='checkbox' name='Mobile Data' value='Mobile' onClick={this.checkboxClickDevice} checked={this.state.device.Mobile} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Fly Mode<input type='checkbox' name='Fly Mode' value='Fly' onClick={this.checkboxClickDevice} checked={this.state.device.Fly} /></label>\n                            </div>\n                        </form>\n\n                        <form className='browser-tools-checkbox'>\n                            <div className='browser-checkbox-item'>\n                                <label>Remove Cookies<input type='checkbox' name='Remove Cookies' value='cookies' onClick={this.checkboxClickTools} checked={this.state.tools.cookies} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Change Resolution<input type='checkbox' name='Change Resolution' value='resolution' onClick={this.checkboxClickTools} checked={this.state.tools.resolution} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Mouse Tracks<input type='checkbox' name='Mouse Tracks' value='tracks' onClick={this.checkboxClickTools} checked={this.state.tools.tracks} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Data Saving Mode<input type='checkbox' name='Data Saving Mode' value='saving' onClick={this.checkboxClickTools} checked={this.state.tools.saving} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Random Generate<input type='checkbox' name='Random Generate' value='generate' onClick={this.checkboxClickTools} checked={this.state.tools.generate} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Analytics Protection<input type='checkbox' name='Analytics Protection' value='protection' onClick={this.checkboxClickTools} checked={this.state.tools.protection} /></label>\n                            </div>\n                            <div className='browser-checkbox-item'>\n                                <label>Remove History<input type='checkbox' name='Remove History' value='history' onClick={this.checkboxClickTools} checked={this.state.tools.history} /></label>\n                            </div>\n                        </form>\n\n                        <form className='settings-buttons'>\n                            <div className='button-left'>\n                                <button onClick={this.onExport} >Export Report</button>\n                            </div>\n                            <div className='button-right'>\n                                <button id='left-button' onClick={this.onStop} >Stop</button>\n                                <button id='right-button' onClick={this.onStart} >Start</button>\n                            </div>\n                        </form>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nexport default Settings","import React, {Component} from 'react';\n\nclass Keywords extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            keywords: ['Shoes', 'Shoes carnival', 'Shoes palace', 'shoe stores near me', 'shoes for crew', 'shoes station', 'Shoes repair', 'Shoes for women', 'Shoes for fashion week', 'Shoes for instagram', 'Shoes stories', 'Shoes show'],\n            addKeyword: ''\n        }\n    }\n\n    onSearchChange = (e) => {\n        this.setState({addKeyword: e.target.value})\n      }\n\n    handleSubmitAdd = (e) => {\n        e.preventDefault();\n        // Add text to array of keywords\n        this.setState({ keywords: [...this.state.keywords, this.state.addKeyword] })\n\n        this.input.value = '';\n        this.setState({addKeyword: ''})\n      }\n\n      handleSubmitClear = (e) => {\n        //   console.log('clear clicked')\n          console.log(e.target.value)\n          this.setState({ keywords: this.state.keywords.filter( function( keyword ) {\n              return keyword !== e.target.value\n          })});\n      }\n    \n\n    render() {\n        return (\n            <div>\n                <h1>Keywords</h1>\n                <div className='search-container'>\n                    <div className='search-bar'>\n                        <form onSubmit={this.handleSubmitAdd}>\n                            <input className='search'type='text' placeholder=\"Enter your keywords here 'shoes'\" onChange={this.onSearchChange} ref={(input) => this.input = input} />\n                            <input className='add' type='submit' value='Add' />\n                        </form>\n                    </div>\n                    <div className='item-list'>\n                        {/* <div className='item-name'></div> */}\n                        {\n                            this.state.keywords.length > 0\n                            ?\n                            this.state.keywords.map( k => \n                                <ul key={k} className='item-row'>\n                                    <li>{k}</li>\n                                    <li className='clear'><button value={k}  onClick={this.handleSubmitClear} >Clear</button></li>\n                                </ul>\n                            )\n                            :\n                            <div></div>\n                        }\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Keywords\n\n// this.state.keywords.map( k => \n//     <div key={k} className='item-row'>\n//         <div className='item-row-left'>\n//         <p>{k}</p>\n//         </div>\n//         <div className='item-row-right'>\n//         <button value={k}  onClick={this.handleSubmitClear} >Clear</button>\n//         </div>\n//     </div>\n// )","import React, {Component} from 'react';\n\nclass Sites extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            sites: ['www.dockers.com', 'www.adidas.com', 'www.nike.com', 'www.underarmour.com', 'www.newbalance.com', 'www.puma.com', 'www.prada.com', 'www.fredperry.com', 'www.catapillar.com', 'www.gucci.com', 'www.almonds.com', 'www.brunoarmagio.com'],\n            addKeyword: ''\n        }\n    }\n\n    onSearchChange = (e) => {\n        this.setState({addKeyword: e.target.value})\n      }\n\n    handleSubmitAdd = (e) => {\n        e.preventDefault();\n        // Add text to array of sites\n        this.setState({ sites: [...this.state.sites, this.state.addKeyword] })\n\n        this.input.value = '';\n        this.setState({addKeyword: ''})\n      }\n\n      handleSubmitClear = (e) => {\n        //   console.log('clear clicked')\n          console.log(e.target.value)\n          this.setState({ sites: this.state.sites.filter( function( keyword ) {\n              return keyword !== e.target.value\n          })});\n      }\n    \n\n    render() {\n        return (\n            <div>\n                <h1>Sites</h1>\n\n                <div className='search-container'>\n                    <div className='search-bar'>\n                        <form onSubmit={this.handleSubmitAdd}>\n                            <input className='search'type='text' placeholder=\"Enter your site here\" onChange={this.onSearchChange} ref={(input) => this.input = input} />\n                            <input className='add' id='site-add' type='submit' value='Add' />\n                        </form>\n                    </div>\n                    <div className='item-list'>\n                        {\n                            this.state.sites.length > 0\n                            ?\n                            this.state.sites.map( k => \n                                <ul key={k} className='item-row'>\n                                    <li>{k}</li>\n                                    <li className='clear'><button value={k}  onClick={this.handleSubmitClear} >Clear</button></li>\n                                </ul>\n                            )\n                            :\n                            <div></div>\n                        }\n                    </div>\n                </div>\n                \n\n            </div>\n        )\n    }\n}\n\nexport default Sites\n\n{/* <div className='search-container'>\n                    <div className='search-bar'>\n                        <form onSubmit={this.handleSubmitAdd}>\n                            <input type='text' placeholder=\"enter your sites here 'shoes'\" onChange={this.onSearchChange} ref={(input) => this.input = input} />\n                            <input type='submit' value='Add' />\n                        </form>\n                    </div>\n                    <div className='item-list'>\n                        {\n                            this.state.sites.length > 0\n                            ?\n                            this.state.sites.map( k => \n                                <div key={k}>\n                                    <p>{k}</p>\n                                    <button value={k}  onClick={this.handleSubmitClear} >Clear</button>\n                                </div>\n                            )\n                            :\n                            <div></div>\n                        }\n                    </div>\n                </div> */}","import React from 'react';\nimport './App.css';\nimport Settings from './components/settings.jsx';\nimport Keywords from './components/keywords.jsx';\nimport Sites from './components/sites.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='component-containter' id='Keywords'>\n        <Keywords />\n      </div>\n      <div className='component-containter' id='Sites'>\n        <Sites  />\n      </div>\n      <div className='component-containter' id='Settings'>\n        <Settings />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}